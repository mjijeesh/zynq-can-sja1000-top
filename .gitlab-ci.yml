image: mjerabek/vivado
before_script:
    # Deploy key: public part specified in project deploy keys
    #             private part in docker volume, mounted on /depkey
    # Add the private key to this user
    - eval $(ssh-agent -s) && ssh-add /depkey/id_rsa
    - mkdir ~/.ssh && cp /depkey/config ~/.ssh/config

build:
    image: mjerabek/vivado
    tags: [vivado]
    stage: build
    before_script:
        # /opt/xilinx is mounted as docker volume (set in gitlab-runner config file)
        - source /opt/xilinx/vivado-2018.2/settings.sh
    script:
        - make system_project
        - make system/system.hdf system/system.bit.bin
    artifacts:
        when: always
        paths:
            - system/system.hdf
            - system/system.bit
            - system/system.bit.bin
            - system/project
            - system/src/top
    only:
        - /^autobuild_.*/
    except:
        - web
        - schedules

build_ctucanfd_driver:
    stage: build
    image: registry.gitlab.com/canfd/server-tools/ctucanfd_drvtest
    only:
        - /^autobuild_.*/
    except:
        - web
        - schedules
    before_script:
        # Do not run the global before_script here
        - ":"
    script:
        - make -C modules/CTU_CAN_FD/driver -j$(nproc)
        - make -C modules/CTU_CAN_FD/driver/linux KDIR=/linux/build -j$(nproc)
        - cp modules/CTU_CAN_FD/driver/linux/ctucanfd.ko ctucanfd.ko
        - cp modules/CTU_CAN_FD/driver/regtest regtest
    artifacts:
        paths:
            - ctucanfd.ko
            - regtest

test:
    stage: test
    image: registry.gitlab.com/canfd/server-tools/ctucanfd_drvtest
    dependencies: [build_ctucanfd_driver, build]
    tags: [hathi]
    only:
        - /^autobuild_.*/
    except:
        - web
        - schedules
    script:
        - ./ci/upload_and_run.sh
    artifacts:
        when: always
        paths:
            - test_hw.xml
        reports:
            junit: [test_hw.xml]

variables:
    GIT_STRATEGY: clone
    GIT_CHECKOUT: "true"
    GIT_SUBMODULE_STRATEGY: recursive
    MASTER_BRANCH: autobuild_test_updated_driver
    AUTO_BRANCH: autobuild_test_updated_driver
